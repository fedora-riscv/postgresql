Originally created by Tom Stellard for PG13:
From 0edaa982336823d4d7af8f10b91579fe0099ef3d Mon Sep 17 00:00:00 2001
From: Tom Stellard <tstellar@redhat.com>
Date: Tue, 20 Apr 2021 20:14:21 -0700
Subject: [PATCH] jit: Workaround potential datalayout mismatch on s390x

Updated by:
Author: Filip Janu≈° <fjanus@redhat.com>
Subject: Backport for PG12

diff -ur postgresql-12.8/src/backend/jit/llvm/llvmjit.c postgresql-12.8-final/src/backend/jit/llvm/llvmjit.c
--- postgresql-12.8/src/backend/jit/llvm/llvmjit.c	2021-08-09 22:50:41.000000000 +0200
+++ postgresql-12.8-final/src/backend/jit/llvm/llvmjit.c	2021-08-18 15:24:15.356319386 +0200
@@ -101,6 +101,7 @@
 LLVMValueRef FuncExecAggTransReparent;
 LLVMValueRef FuncExecAggInitGroup;

+LLVMModuleRef llvm_types_module = NULL;

 static bool llvm_session_initialized = false;
 static size_t llvm_generation = 0;
@@ -742,6 +743,35 @@
 }

 /*
+ * For the systemz target, LLVM uses a different datalayout for z13 and newer
+ * CPUs than it does for older CPUs.  This can cause a mismatch in datalayouts
+ * in the case where the llvm_types_module is compiled with a pre-z13 CPU
+ * and the JIT is running on z13 or newer.
+ * See computeDataLayout() function in
+ * llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp for information on the
+ * datalayout differences.
+ */
+static bool
+needs_systemz_workaround(void)
+{
+	bool ret = false;
+	LLVMContextRef llvm_context;
+	LLVMTypeRef vec_type;
+	LLVMTargetDataRef llvm_layoutref;
+	if (strncmp(LLVMGetTargetName(llvm_targetref), "systemz", strlen("systemz")))
+	{
+		return false;
+	}
+
+	llvm_context = LLVMGetModuleContext(llvm_types_module);
+	vec_type = LLVMVectorType(LLVMIntTypeInContext(llvm_context, 32), 4);
+	llvm_layoutref = LLVMCreateTargetData(llvm_layout);
+	ret = (LLVMABIAlignmentOfType(llvm_layoutref, vec_type) == 16);
+	LLVMDisposeTargetData(llvm_layoutref);
+	return ret;
+}
+
+/*
  * Per session initialization.
  */
 static void
@@ -750,6 +780,7 @@
 	MemoryContext oldcontext;
 	char	   *error = NULL;
 	char	   *cpu = NULL;
+	char       *host_features = NULL;
 	char	   *features = NULL;
 	LLVMTargetMachineRef opt0_tm;
 	LLVMTargetMachineRef opt3_tm;
@@ -781,10 +812,17 @@
 	 * features not all CPUs have (weird, huh).
 	 */
 	cpu = LLVMGetHostCPUName();
-	features = LLVMGetHostCPUFeatures();
+	features = host_features = LLVMGetHostCPUFeatures();
 	elog(DEBUG2, "LLVMJIT detected CPU \"%s\", with features \"%s\"",
 		 cpu, features);

+	if (needs_systemz_workaround())
+	{
+		const char *no_vector =",-vector";
+		features = malloc(sizeof(char) * (strlen(host_features) + strlen(no_vector) + 1));
+		sprintf(features, "%s%s", host_features, no_vector);
+	}
+
 	opt0_tm =
 		LLVMCreateTargetMachine(llvm_targetref, llvm_triple, cpu, features,
 								LLVMCodeGenLevelNone,
@@ -798,8 +836,13 @@

 	LLVMDisposeMessage(cpu);
 	cpu = NULL;
-	LLVMDisposeMessage(features);
+	if (features != host_features)
+	{
+		free(features);
+	}
 	features = NULL;
+	LLVMDisposeMessage(host_features);
+	host_features = NULL;

 	/* force symbols in main binary to be loaded */
 	LLVMLoadLibraryPermanently(NULL);
@@ -968,6 +1011,8 @@
 	{
 		elog(ERROR, "LLVMParseBitcode2 of %s failed", path);
 	}
+
+    llvm_types_module = LLVMCloneModule(mod);
 	LLVMDisposeMemoryBuffer(buf);

 	/*
diff -ur postgresql-12.8/src/include/jit/llvmjit.h postgresql-12.8-final/src/include/jit/llvmjit.h
--- postgresql-12.8/src/include/jit/llvmjit.h	2021-08-09 22:50:41.000000000 +0200
+++ postgresql-12.8-final/src/include/jit/llvmjit.h	2021-08-18 15:24:15.369319571 +0200
@@ -57,6 +57,7 @@
 	List	   *handles;
 } LLVMJitContext;

+extern LLVMModuleRef llvm_types_module;

 /* type and struct definitions */
 extern LLVMTypeRef TypeParamBool;
